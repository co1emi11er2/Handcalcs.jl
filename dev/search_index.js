var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Handcalcs","category":"page"},{"location":"#Handcalcs","page":"Home","title":"Handcalcs","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for Handcalcs.jl. This package supplies macros to generate LaTeX formatted strings from mathmatical formulas. This package takes inspiration from handcalcs.py which is a python package that works best in jupyter notebooks. The goal is to get the functionalities of that package and bring them to Julia. The current version of Handcalcs.jl is working for typical algebraic formulas. Future plans are to integrate the package with Unitful.jl, be able to render the algebraic expressions within a function, and many other things. This package is an extension of Latexify.jl. The @latexdefine macro is similar to the main @handcalcs macro, but instead of only a symbolic rendering it also renders the numeric substitution.","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A simple example for a single expression:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Handcalcs\na = 2\nb = -5\nc = 2\n@handcalcs x = (-b + sqrt(b^2 - 4*a*c))/ (2*a)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The variable x is still evaluated:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simple example for multiple expressions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"b = 5 # width\nh = 15 # height\n@handcalcs begin\n  I_x = (b*h^3)/12; \"moment of inertia about x\";\n  I_y = (h*b^3)/12; \"moment of inertia about y\";\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The I_x and I_y variables are still evaluated:","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"The moment of inertia about the x direction is: $I_x\\n\nThe moment of inertia about the y direction is: $I_y\\n\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"A simple example for a function:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TestHandcalcFunctions\nb = 5 # width\nh = 15 # height\n@handfunc Ix = calc_Ix(b, h) # function is defined in TestHandcalcFunctions package","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Ix variable is evaluated. Ix being the variable assigned in the @handfunc part (variables within function are not defined in the global name space). If you assign it to a different variable then that will be the variable defined (although you will still see it as Ix in the latex portion). Also note that return statements are filtered out of the function body, so keep relevant parts separate from return statements.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Current Limitations for @handfunc","category":"page"},{"location":"","page":"Home","title":"Home","text":"You must pass numbers or symbols (not fields of objects). This is also a current limitation of the @handcalcs macro.\nI believe the function needs to be defined in another package. The @code_expr macro from CodeTracking.jl does not see functions in Main for some reason.\nIf the function has other function calls within it's body that are not available in Main, then the macro will error.","category":"page"},{"location":"#Using-Unitful-with-UnitfulLatexify","page":"Home","title":"Using Unitful with UnitfulLatexify","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package has plans to work with the packages Unitful.jl and UnitfulLatexify.jl. The only issue known is the rendering of units under exponents. Parenthesis need to wrap the numerical value and the unit for it to display correctly. See example below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Unitful, UnitfulLatexify\na = 2u\"inch\"\nb = -5u\"inch\"\n@handcalc c = sqrt(a^2 + b^2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can see that it looks as though only the unit is being squared. This should be an easy fix. See pull request made in Latexify.jl here. The pull request has been up for a while, so not sure if it will get updated soon. You can always dev Latexify and add the one line change for now.","category":"page"},{"location":"#Future-Plans","page":"Home","title":"Future Plans","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are a number of things that I would like to implement to the package. See handcalcs.py for potential features. Here is a list of features I hope to add:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Get recursion working for @handfunc macro\nA parameters macro similar to python package\nA way to break down a LaTeX equation that is too long to multiple lines","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Handcalcs]","category":"page"},{"location":"#Handcalcs.Handcalcs","page":"Home","title":"Handcalcs.Handcalcs","text":"Module for better calc documentation.\n\n\n\n\n\n","category":"module"},{"location":"#Handcalcs.@handcalc-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handcalc","text":"@handcalc expression\n\nCreate LaTeXString representing expression. The expression being a vaiable followed by an equals sign and an algebraic equation. Any side effects of the expression, like assignments, are evaluated as well. The RHS can be formatted or otherwise transformed by supplying a function as kwarg post.\n\nExamples\n\njulia> a = 2\n2\njulia> b = 5\n5\njulia> @handcalc c = a + b\nL\"$c = a + b = 2 + 5 = 7$\"\n\njulia> c\n7\n\n\n\n\n\n","category":"macro"},{"location":"#Handcalcs.@handcalcs-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handcalcs","text":"@handcalcs expressions\n\nCreate LaTeXString representing expressions. The expressions representing a number of expressions. A single expression being a vaiable followed by an equals sign and an algebraic equation. Any side effects of the expression, like assignments, are evaluated as well.   The RHS can be formatted or otherwise transformed by supplying a function as kwarg post. Can also add comments to the end of equations. See example below.\n\nExamples\n\njulia> a = 2\n2\njulia> b = 5\n5\njulia> @handcalcs begin \n    c = a + b; \"eq 1\";\n    d = a - c\nend\nL\"$\\begin{align}\nc &= a + b = 2 + 5 = 7\\text{  }(\\text{eq 1})\n\\\\[10pt]\nd &= a - c = 2 - 7 = -5\n\\end{align}$\"\n\njulia> c\n7\njulia> d\n-5\n\n\n\n\n\n\n","category":"macro"},{"location":"#Handcalcs.@handfunc-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handfunc","text":"@handfunc expression\n\nCreate LaTeXString representing expressions. These expressions represent a number of expressions that exist within the function that was called. A single expression being a variable followed by an equals sign and the function being called. The expression is evaluated as well (not the expressions within the function). The RHS can be formatted or otherwise transformed by supplying a function as kwarg post.\n\nExamples\n\njulia> @handfunc Iy = calc_Ix(5, 15)\nL\"$\\begin{align}\nIx &= \\frac{b \\cdot h^{3}}{12} = \\frac{5 \\cdot 15^{3}}{12} = 1406.25\n\\end{align}$\"\n\njulia> Iy\n1406.25\n\n\nNote how Iy is evaluated but Ix is not.\n\n\n\n\n\n","category":"macro"}]
}
