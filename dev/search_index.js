var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Handcalcs","category":"page"},{"location":"#Handcalcs","page":"Home","title":"Handcalcs","text":"","category":"section"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is the documentation for Handcalcs.jl. This package supplies macros to generate LaTeX formatted strings from mathmatical formulas. This package takes inspiration from handcalcs.py which is a python package that works best in jupyter notebooks. The goal is to get the functionalities of that package and bring them to Julia. At this point, I believe most (if not all) of the features from the python package are here. Future plans are to integrate the package with Unitful.jl. This package is an extension of Latexify.jl. The @latexdefine macro is similar to the main @handcalcs macro, but instead of only a symbolic rendering it also renders the numeric substitution.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This package now renders properly in Quarto/Weave!! You can change the default settings to your liking. See examples below.","category":"page"},{"location":"#Expression-Examples","page":"Home","title":"Expression Examples","text":"","category":"section"},{"location":"#A-single-expression-example:","page":"Home","title":"A single expression example:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Handcalcs\na = 2\nb = -5\nc = 2\n@handcalcs x = (-b + sqrt(b^2 - 4*a*c))/ (2*a)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The variable x is still evaluated:","category":"page"},{"location":"","page":"Home","title":"Home","text":"x","category":"page"},{"location":"#An-example-of-multiple-expressions:","page":"Home","title":"An example of multiple expressions:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"b = 5 # width\nh = 15 # height\n@handcalcs begin\n  I_x = (b*h^3)/12; \"moment of inertia about x\";\n  I_y = (h*b^3)/12; \"moment of inertia about y\";\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The I_x and I_y variables are still evaluated:","category":"page"},{"location":"","page":"Home","title":"Home","text":"println(\"The moment of inertia about the x direction is: $I_x\\n\nThe moment of inertia about the y direction is: $I_y\\n\")","category":"page"},{"location":"#You-can-edit-the-layout-of-the-returned-LaTeX-expression-with-cols-and-spa:","page":"Home","title":"You can edit the layout of the returned LaTeX expression with cols and spa:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"cols - change the number of columns the expression returns (default = 1).\nspa - change the vertical line spacing between expressions (default = 10).\nh_env - change the environment (default = \"aligned\").\nlen - change expression to write to multiple lines using len=:long (default = :short). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: @handcalcs macro can also take symbols of defined variables. See below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"a, b, c = 1, 2, 3\n@handcalcs begin\n    a # see note above\n    b\n    c\n    x = 4\n    y = 5\n    z = 6\nend cols=3 spa=0","category":"page"},{"location":"","page":"Home","title":"Home","text":"a, b, c = 2, -5, 2\n@handcalcs begin\n    x1 = (-b + sqrt(b^2 - 4*a*c))/(2*a)\n    x2 = (-b - sqrt(b^2 - 4*a*c))/(2*a)\nend len = :long # using len argument forces cols=1","category":"page"},{"location":"#Function-Examples","page":"Home","title":"Function Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The @handcalcs macro will now automatically try to \"unroll\" the expressions within a function when the expression has the following pattern: variable = function_name(args...; kwargs...). Note that this is recursive, so if you have a function that calls other functions where the expressions that call the function are of the format mentioned, it will continue to step into each function to \"unroll\" all expressions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"One issue that can arise are for the functions that you do not want to unroll. Consider the expression: y = sin(x) or y = x + 5. Both of these expressions match the format: variable = function_name(args...; kwargs...) and would be unrolled. This would result in an error since these functions don't have generic math expressions that can be latexified defining the function. You will need to use the not_funcs keyword to manually tell the @handcalcs macro to pass over these functions. Some of the common math functions that you will not want to unroll are automatically passed over. See examples below.","category":"page"},{"location":"#An-example-for-rendering-expressions-within-a-function:","page":"Home","title":"An example for rendering expressions within a function:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"function calc_Ix(b, h) # function defined in TestHandcalcFunctions\n    Ix = b*h^3/12\n    return Ix\nend;","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TestHandcalcFunctions\nb = 5 # width\nh = 15 # height\n@handcalcs Ix = calc_Ix(b, h) # function is defined in TestHandcalcFunctions package","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Ix variable is evaluated. Ix being the variable assigned in the @handcalcs part (variables within function are not defined in the global name space). If you assign it to a different variable then that will be the variable defined (although you will still see it as Ix in the latex portion). Also note that return statements are filtered out of the function body, so keep relevant parts separate from return statements.","category":"page"},{"location":"","page":"Home","title":"Home","text":"function calc_Is(b, h) # function defined in TestHandcalcFunctions\n    Ix = calc_Ix(b, h)\n    Iy = calc_Iy(h, b)\n    return Ix, Iy\nend;","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TestHandcalcFunctions\nx = 0\n@handcalcs begin\ny = sin(x)\nz = cos(x)\nI_x, I_y = TestHandcalcFunctions.calc_Is(5, 15)\nend not_funcs = [sin cos]","category":"page"},{"location":"","page":"Home","title":"Home","text":"In the above example sin and cos were passed over and calcIs was not. As you can see, the calcIs function was a function that called other functions, and the @handcalcs macro continued to step into each function to unroll all expressions. Please see below for a list of the current functions that are passed over automatically. Please submit a pull request if you would like to add more generic math functions that I have left out. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"const math_syms = [\n    :*, :/, :^, :+, :-, :%,\n    :.*, :./, :.^, :.+, :.-, :.%,\n    :<, :>, Symbol(==), :<=, :>=,\n    :.<, :.>, :.==, :.<=, :.>=,\n    :sqrt, :sin, :cos, :tan]","category":"page"},{"location":"","page":"Home","title":"Home","text":"Current Limitations for @handcalcs","category":"page"},{"location":"","page":"Home","title":"Home","text":"I believe the function needs to be defined in another package. The @code_expr macro from CodeTracking.jl does not see functions in Main for some reason.\nIf the function has other function calls within it's body that are not available in Main, then the macro will error.","category":"page"},{"location":"#An-example-of-changing-default-settings:","page":"Home","title":"An example of changing default settings:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can change the default settings using the set_handcalcs function (similar to the set_default function in Latexify).","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_handcalcs(cols=3)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that this changes Handcalcs.jl from within and should therefore only be used in your own Julia sessions (do not call this from within your packages).","category":"page"},{"location":"","page":"Home","title":"Home","text":"The calls are additive so that a new call with","category":"page"},{"location":"","page":"Home","title":"Home","text":"set_handcalcs(spa = 5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"will not cancel out the changes we just made to cols. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To view your changes, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"get_handcalcs()","category":"page"},{"location":"","page":"Home","title":"Home","text":"and to reset your changes, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"reset_handcalcs()","category":"page"},{"location":"#Using-Unitful-with-UnitfulLatexify","page":"Home","title":"Using Unitful with UnitfulLatexify","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package has plans to work with the packages Unitful.jl and UnitfulLatexify.jl. The only issue known is the rendering of units under exponents. Parenthesis need to wrap the numerical value and the unit for it to display correctly. See example below.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Unitful, UnitfulLatexify\na = 2u\"inch\"\nb = -5u\"inch\"\n@handcalc c = sqrt(a^2 + b^2)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can see that it looks as though only the unit is being squared. This should be an easy fix. See pull request made in Latexify.jl here. The pull request has been up for a while, so not sure if it will get updated soon. You can always dev Latexify and add the one line change for now.","category":"page"},{"location":"#Future-Plans","page":"Home","title":"Future Plans","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"There are a number of things that I would like to implement to the package. Here is a list of features I hope to add:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Maybe add a way to change color of expressions.\nMaybe a symbolic mode that would essentially be like @latexdefine but you get function unrolling and multiline support.\nA way to disable @handcalcs macro if you are wanting to run script for multiple iterations and not worried about rendering all iterations. That way you get speed for those situations.\nI have also thought about adding a setting that you could change if you were within the REPL and instead of latex (since it is not very readable) to instead output a simple string instead. For example: I_x = b*h^3/12 = 5*15^3/12 = 1406.25.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Handcalcs]","category":"page"},{"location":"#Handcalcs.Handcalcs","page":"Home","title":"Handcalcs.Handcalcs","text":"Module for better calc documentation.\n\n\n\n\n\n","category":"module"},{"location":"#Handcalcs.get_handcalcs","page":"Home","title":"Handcalcs.get_handcalcs","text":"get_handcalcs\n\nGet a Dict with the user-specified default kwargs for handcalcs, set by set_handcalcs.\n\n\n\n\n\n","category":"function"},{"location":"#Handcalcs.reset_handcalcs-Tuple{}","page":"Home","title":"Handcalcs.reset_handcalcs","text":"reset_handcalcs()\n\nReset user-specified default kwargs for handcalcs, set by set_handcalcs.\n\n\n\n\n\n","category":"method"},{"location":"#Handcalcs.set_handcalcs-Tuple{}","page":"Home","title":"Handcalcs.set_handcalcs","text":"set_default(; kwargs...)\n\nSet default kwarg values for handcalcs. \n\nThis works for all keyword arguments. It is additive such that if you call it multiple times, defaults will be added or replaced, but not reset.\n\nExample: \n\nset_handcalcs(cols = 2, spa = 5)\n\nTo reset the defaults that you have set, use reset_handcalcs. To see your specified defaults, use get_handcalcs.\n\n\n\n\n\n","category":"method"},{"location":"#Handcalcs.@handcalc-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handcalc","text":"@handcalc expression\n\nCreate LaTeXString representing expression. The expression being a vaiable followed by an equals sign and an algebraic equation. Any side effects of the expression, like assignments, are evaluated as well. The RHS can be formatted or otherwise transformed by supplying a function as kwarg post.\n\nExamples\n\njulia> a = 2\n2\njulia> b = 5\n5\njulia> @handcalc c = a + b\nL\"$c = a + b = 2 + 5 = 7$\"\n\njulia> c\n7\n\n\n\n\n\n","category":"macro"},{"location":"#Handcalcs.@handcalcs-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handcalcs","text":"@handcalcs expressions\n\nCreate LaTeXString representing expressions. The expressions representing a number of expressions. A single expression being a vaiable followed by an equals sign and an algebraic equation. Any side effects of the expression, like assignments, are evaluated as well.   The RHS can be formatted or otherwise transformed by supplying a function as kwarg post. Can also add comments to the end of equations. See example below.\n\nExamples\n\njulia> a = 2\n2\n\njulia> b = 5\n5\n\njulia> e = 7\n7\n\njulia> @handcalcs begin \n    c = a + b; \"eq 1\";\n    d = a - c\n    e\nend\nL\"$\\begin{aligned}\nc &= a + b = 2 + 5 = 7\\;\\text{  }(\\text{eq 1})\n\\\\[10pt]\nd &= a - c = 2 - 7 = -5\n\\\\[10pt]\ne &= 7\n\\end{aligned}$\"\n\njulia> c\n7\n\njulia> d\n-5\n\n\n\n\n\n\n","category":"macro"},{"location":"#Handcalcs.@handfunc-Tuple{Any, Vararg{Any}}","page":"Home","title":"Handcalcs.@handfunc","text":"@handfunc expression\n\nCreate LaTeXString representing expressions. These expressions represent a number of expressions that exist within the function that was called. A single expression being a variable followed by an equals sign and the function being called. The expression is evaluated as well (not the expressions within the function). The RHS can be formatted or otherwise transformed by supplying a function as kwarg post.\n\nExamples\n\njulia> @handfunc Iy = calc_Ix(5, 15)\nL\"$\\begin{aligned}\nIx &= \\frac{b \\cdot h^{3}}{12} = \\frac{5 \\cdot 15^{3}}{12} = 1406.25\n\\end{aligned}$\"\n\njulia> Iy\n1406.25\n\n\nNote how Iy is evaluated but Ix is not.\n\n\n\n\n\n","category":"macro"}]
}
